<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>php on Andi Rückauer</title>
    <link>https://arueckauer.github.io/tags/php/</link>
    <description>Recent content in php on Andi Rückauer</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Thu, 17 Oct 2019 09:20:19 +0200</lastBuildDate>
    
	<atom:link href="https://arueckauer.github.io/tags/php/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Logical Operator and Operator Precedence</title>
      <link>https://arueckauer.github.io/posts/2019/10/logical-operator-and-operator-precedence/</link>
      <pubDate>Thu, 17 Oct 2019 09:20:19 +0200</pubDate>
      
      <guid>https://arueckauer.github.io/posts/2019/10/logical-operator-and-operator-precedence/</guid>
      <description>@MichalBundyra tweeted yesterday:
 TIL &amp;amp;&amp;amp; and AND are not the same&amp;hellip; https://3v4l.org/dVVYc Thanks @geerteltink
 Honestly, I never use(d) and. But it is interesting to learn that there is an actual difference and not just a flavor.
Michal compares the output of and and &amp;amp;&amp;amp;.
&amp;lt;?php $a = 2 and 3; $b = 2 &amp;amp;&amp;amp; 3; var_dump($a, $b);  Result int(2) bool(true)  Wait what?
Logical Operator &amp;ldquo;and&amp;rdquo; and &amp;ldquo;&amp;amp;&amp;amp;&amp;rdquo; are not identical Logical Operators The documentation for the Logical Operators states:</description>
    </item>
    
    <item>
      <title>Console Commands in an Expressive Applicaton</title>
      <link>https://arueckauer.github.io/posts/2019/07/console-commands-in-an-expressive-applicaton/</link>
      <pubDate>Thu, 04 Jul 2019 16:09:13 +0200</pubDate>
      
      <guid>https://arueckauer.github.io/posts/2019/07/console-commands-in-an-expressive-applicaton/</guid>
      <description>In a current customer project, I needed the ability to run commands from the CLI.
Symfony provides a console component which is, among others, used by zendframework/zend-expressive-tooling. The documentation got me off to a quick start and I got my first Hello command running within minutes.
I wanted to provide a re-usable package, where the implementation can provide the definition of a command list.
Since I am not using the package within a Symfony application, I needed somehow access to the Service Container of the Expressive application.</description>
    </item>
    
    <item>
      <title>Format Seconds as Time in PHP</title>
      <link>https://arueckauer.github.io/posts/2019/06/format-seconds-as-time-in-php/</link>
      <pubDate>Fri, 28 Jun 2019 09:04:39 +0200</pubDate>
      
      <guid>https://arueckauer.github.io/posts/2019/06/format-seconds-as-time-in-php/</guid>
      <description>Somewhat over ten years ago I was working on a project, where we measured execution time and memory consumption of PHP scripts. To display the execution time in a human-readable way, we used a function to format the timestamp provided by microtime().
&amp;lt;?php class Application__Helper_Timer { /** * Calculates the execution time of a script * @param float $executionTime * @return string */ public static function formatExecutionTime($executionTime) { $seconds = $this-&amp;gt;executionTime; $hours = 0; $minutes = 0; while (($seconds - 3600) &amp;gt; 0) { $hours++; $seconds -= 3600; } while (($seconds - 60) &amp;gt; 0) { $minutes++; $seconds -= 60; } if (1 === strlen((string) $hours)) { $hours = &#39;0&#39; .</description>
    </item>
    
    <item>
      <title>Robot Simulator Chapter 2</title>
      <link>https://arueckauer.github.io/posts/2019/06/robot-simulator-chapter-2/</link>
      <pubDate>Sat, 15 Jun 2019 20:57:36 +0200</pubDate>
      
      <guid>https://arueckauer.github.io/posts/2019/06/robot-simulator-chapter-2/</guid>
      <description>This article is part of my #100DaysOfCode and #100DaysOfBlogging challenge. R1D24
After a mentor left some feedback:
 I like that you&amp;rsquo;ve split out the direction and position. I think you can go a bit further though.
 I went back to the drawing board. 😊 Seriously, I read the feedback on my mobile and let the thought process do its work. Then I took pen and paper and outlined an improved structure.</description>
    </item>
    
    <item>
      <title>Robot Simulator</title>
      <link>https://arueckauer.github.io/posts/2019/06/robot-simulator/</link>
      <pubDate>Fri, 14 Jun 2019 21:30:50 +0200</pubDate>
      
      <guid>https://arueckauer.github.io/posts/2019/06/robot-simulator/</guid>
      <description>This article is part of my #100DaysOfCode and #100DaysOfBlogging challenge. R1D23
Instructions Today&amp;rsquo;s challenge is to write a robot simulator. A robot is placed on a hypothetical infinite grid phasing either north, east, south or west. It has three possible movements:
 turn right, turn left and advance.  A robot can also follow instructions on how to proceed.
  The letter-string &amp;ldquo;RAALAL&amp;rdquo; means:  Turn right Advance twice Turn left Advance once Turn left yet again  Say a robot starts at {7, 3} facing north.</description>
    </item>
    
    <item>
      <title>Use return types as much as possible?</title>
      <link>https://arueckauer.github.io/posts/2019/06/use-return-types-as-much-as-possible/</link>
      <pubDate>Thu, 13 Jun 2019 23:42:55 +0200</pubDate>
      
      <guid>https://arueckauer.github.io/posts/2019/06/use-return-types-as-much-as-possible/</guid>
      <description>This article is part of my #100DaysOfCode and #100DaysOfBlogging challenge. R1D22
A mentor commented on my yesterday&amp;rsquo;s solution to the Grade School exercise.
 Good solution
Awesome! using strict_types
It&amp;rsquo;s approved for me but try to use return types as much as possible, I&amp;rsquo;m missing initGradeIfItDoesNotExist
 This post will reflect some of my personal thoughts. Since the mentor&amp;rsquo;s suggestion could be just some personal preference, I will not name the mentor.</description>
    </item>
    
    <item>
      <title>Grade School</title>
      <link>https://arueckauer.github.io/posts/2019/06/grade-school/</link>
      <pubDate>Wed, 12 Jun 2019 23:32:10 +0200</pubDate>
      
      <guid>https://arueckauer.github.io/posts/2019/06/grade-school/</guid>
      <description>This article is part of my #100DaysOfCode and #100DaysOfBlogging challenge. R1D21
This Exercism exercise is straight forward.
An extract from the instructions:
 Given students&amp;rsquo; names along with the grade that they are in, create a roster for the school.
In the end, you should be able to:
 Add a student&amp;rsquo;s name to the roster for a grade Get a list of all students enrolled in a grade Get a sorted list of all students in all grades.</description>
    </item>
    
    <item>
      <title>Meetup (Side Exercise)</title>
      <link>https://arueckauer.github.io/posts/2019/06/meetup-side-exercise/</link>
      <pubDate>Tue, 11 Jun 2019 21:29:52 +0200</pubDate>
      
      <guid>https://arueckauer.github.io/posts/2019/06/meetup-side-exercise/</guid>
      <description>This article is part of my #100DaysOfCode and #100DaysOfBlogging challenge. R1D20
Next up in the PHP sidetrack is the Meetup exercise.
A function is provided with the arguments
 (int) year, (int) month, (string) descriptor and (string) weekday  and expected to process the input and return an instance of DateTime with the corresponding date.
While year, month and weekday are an exact representation of their values, the descriptor is a bit more complicated.</description>
    </item>
    
    <item>
      <title>Sieve of Eratosthenes (Side Exercise)</title>
      <link>https://arueckauer.github.io/posts/2019/06/sieve-of-eratosthenes-side-exercise/</link>
      <pubDate>Mon, 10 Jun 2019 21:31:48 +0200</pubDate>
      
      <guid>https://arueckauer.github.io/posts/2019/06/sieve-of-eratosthenes-side-exercise/</guid>
      <description>This article is part of my #100DaysOfCode and #100DaysOfBlogging challenge. R1D19
Today I am solving the Sieve of Eratosthenes side exercise of the Exercism PHP track.
 In mathematics, the Sieve of Eratosthenes is a simple, ancient algorithm for finding all prime numbers up to any given limit. It does so by iteratively marking as composite (i.e., not prime) the multiples of each prime, starting with the first prime number, 2.</description>
    </item>
    
    <item>
      <title>To JWT or not to JWT</title>
      <link>https://arueckauer.github.io/posts/2019/06/to-jwt-or-not-to-jwt/</link>
      <pubDate>Fri, 07 Jun 2019 19:34:43 +0200</pubDate>
      
      <guid>https://arueckauer.github.io/posts/2019/06/to-jwt-or-not-to-jwt/</guid>
      <description>This article is part of my #100DaysOfCode and #100DaysOfBlogging challenge. R1D17
At the IPC 2019 Authentication and Authorization was one of the two most interesting topics (event sourcing being the second). Sessions were comparing the usage of traditional authentication with the usage of JWT, maybe the future technology WebAuthn requiring no passwords for registration or login processes, using an identity provider instead of implementing our own processes over and over again, and not so quite common applications of web tokens - like physically opening doors.</description>
    </item>
    
    <item>
      <title>IPC 2019: Day Three</title>
      <link>https://arueckauer.github.io/posts/2019/06/ipc-2019-day-three/</link>
      <pubDate>Thu, 06 Jun 2019 20:49:38 +0200</pubDate>
      
      <guid>https://arueckauer.github.io/posts/2019/06/ipc-2019-day-three/</guid>
      <description>This article is part of my #100DaysOfCode and #100DaysOfBlogging challenge. R1D16
Pragmatic Queue Processing at Scale By Arne Blankerts, Principal Consultant at thePHP.cc and Sebastian Heuer, Developer Advocate at kartenmacherei.de
Arne and Sebastian deliver messages from real world problems they tackled together. It&amp;rsquo;s not the first presentation of the duo. These sessions belong to the highlights of the conference (Casino night is still #1 😋). The talk gave a wonderful narrative overview of queue pressing, further readings of what might be of interest as well as learnings from their experience.</description>
    </item>
    
    <item>
      <title>IPC 2019: Day Two</title>
      <link>https://arueckauer.github.io/posts/2019/06/ipc-2019-day-two/</link>
      <pubDate>Wed, 05 Jun 2019 21:32:35 +0200</pubDate>
      
      <guid>https://arueckauer.github.io/posts/2019/06/ipc-2019-day-two/</guid>
      <description>This article is part of my #100DaysOfCode and #100DaysOfBlogging challenge. R1D15
I have to say that I am surprised by the overall high-quality sessions. This is one of the best conferences I attended. Thanks to all the speakers and their effort and time they put into preparation. You rock!
Modern SQL: Evolution of a Dinosaur By Markus Winand, &amp;ldquo;SQL renaissance ambassador&amp;rdquo;, independent author, trainer, and consultant on all things SQL</description>
    </item>
    
    <item>
      <title>IPC 2019: Day One</title>
      <link>https://arueckauer.github.io/posts/2019/06/ipc-2019-day-one/</link>
      <pubDate>Tue, 04 Jun 2019 22:53:29 +0200</pubDate>
      
      <guid>https://arueckauer.github.io/posts/2019/06/ipc-2019-day-one/</guid>
      <description>This article is part of my #100DaysOfCode and #100DaysOfBlogging challenge. R1D14
This was a great first day
How to make Loveliness: an HTML Treasure Hunt Keynote by Bruce Lawson, one of the editors of the W3C’s HTML5.3 specification
To me, this was the best keynote I have ever attended. He presented a topic that could easily be boring and dry in a way that captured the audience&amp;rsquo;s (well at least my) full attention.</description>
    </item>
    
    <item>
      <title>Difference of Squares -Part II</title>
      <link>https://arueckauer.github.io/posts/2019/06/difference-of-squares-part-ii/</link>
      <pubDate>Mon, 03 Jun 2019 19:25:05 +0200</pubDate>
      
      <guid>https://arueckauer.github.io/posts/2019/06/difference-of-squares-part-ii/</guid>
      <description>This article is part of my #100DaysOfCode and #100DaysOfBlogging challenge. R1D13
In the meanwhile, dstockto reviewed and approved my solution. 🤘🏼 Funny story: He found my blog and saw my submission here before seeing it on Exercism.
He gave me an interesting additional challenge, to use &amp;ldquo;closed&amp;rdquo; form math-based solutions. This would also allow performance improvement, since the current implementation will take longer the larger $number is.
Square Of Sum For this function dstockto mentioned the Gauss formula.</description>
    </item>
    
    <item>
      <title>Php Version Manager: First Idea</title>
      <link>https://arueckauer.github.io/posts/2019/06/php-version-manager-first-idea/</link>
      <pubDate>Sat, 01 Jun 2019 21:27:11 +0200</pubDate>
      
      <guid>https://arueckauer.github.io/posts/2019/06/php-version-manager-first-idea/</guid>
      <description>This article is part of my #100DaysOfCode and #100DaysOfBlogging challenge. R1D12
With a working CLI PHP version switcher, it would be very neat to also have a CLI PHP version manager, which allows the automated installation of available PHP versions. As an inspiration I am looking with one eye toward the nvm. I am aware of the phpvm package. This package provided by Anthony Ferrara is far from stable and currently supports only Ubuntu.</description>
    </item>
    
    <item>
      <title>Php Version Switcher: The Function</title>
      <link>https://arueckauer.github.io/posts/2019/05/php-version-switcher-the-function/</link>
      <pubDate>Fri, 31 May 2019 22:56:25 +0200</pubDate>
      
      <guid>https://arueckauer.github.io/posts/2019/05/php-version-switcher-the-function/</guid>
      <description>This article is part of my #100DaysOfCode and #100DaysOfBlogging challenge. R1D11
This is part four of a series of articles about the PHP Version Switcher.
 Part One: Php Version Switcher: PowerShell Module Part Two: Php Version Switcher: PowerShell Naming Convention Part Three: Php Version Switcher: The Structure  Today I finally breathe life into the module function. 🕺🏼
Administrator privileges Since the Apache services will be restarted, the module requires administrator privileges.</description>
    </item>
    
    <item>
      <title>Php Version Switcher: PowerShell Module</title>
      <link>https://arueckauer.github.io/posts/2019/05/php-version-switcher-powershell-module/</link>
      <pubDate>Tue, 28 May 2019 20:36:42 +0200</pubDate>
      
      <guid>https://arueckauer.github.io/posts/2019/05/php-version-switcher-powershell-module/</guid>
      <description>This article is part of my #100DaysOfCode and #100DaysOfBlogging challenge. R1D8
This is part one of a series of articles about the PHP Version Switcher.
 Part Two: Php Version Switcher: PowerShell Naming Convention Part Three: Php Version Switcher: The Structure Part Four: Php Version Switcher: The Function  Most of our costumers provide Windows Servers for the PHP applications we implement and maintain for them. Although it has become much easier to get a PHP running under Windows than ten years ago, it&amp;rsquo;s still not the choice environment for a typical PHP web application.</description>
    </item>
    
    <item>
      <title>Difference of Squares</title>
      <link>https://arueckauer.github.io/posts/2019/05/difference-of-squares/</link>
      <pubDate>Mon, 27 May 2019 20:28:26 +0200</pubDate>
      
      <guid>https://arueckauer.github.io/posts/2019/05/difference-of-squares/</guid>
      <description>This article is part of my #100DaysOfCode and #100DaysOfBlogging challenge. R1D7
Today I am solving the Difference of Squares of the PHP track on Exercism.
Exercism offers its users learning new programming languages through exercises with the valuable feedback of mentors. It currently has 50 different language tracks like C#, Go, Kotlin, TypeScript and many others. Head over to Exercism to join.
Introduction The source of this exercise is Problem 6 of the Euler project.</description>
    </item>
    
    <item>
      <title>Use dotenv to configure a Zend Expressive application</title>
      <link>https://arueckauer.github.io/posts/2019/05/use-dotenv-to-configure-a-zend-expressive-application/</link>
      <pubDate>Sat, 25 May 2019 20:43:15 +0200</pubDate>
      
      <guid>https://arueckauer.github.io/posts/2019/05/use-dotenv-to-configure-a-zend-expressive-application/</guid>
      <description>This article is part of my #100DaysOfCode and #100DaysOfBlogging challenge. R1D6
 [The Twelve-Factor App] requires strict separation of config from code.
 Taken from factor three of The Twelve-Factor App.
Today I am studying about how to achieve this requirement making usage of phpdotenv in a Zend Expressive context.
I will not go into details on and advantages of this concept. A leave that up to other resources.</description>
    </item>
    
    <item>
      <title>Day 5: A change for the better</title>
      <link>https://arueckauer.github.io/posts/2019/05/day-5-a-change-for-the-better/</link>
      <pubDate>Fri, 24 May 2019 23:37:51 +0200</pubDate>
      
      <guid>https://arueckauer.github.io/posts/2019/05/day-5-a-change-for-the-better/</guid>
      <description>This article is part of my #100DaysOfCode and #100DaysOfBlogging challenge. R1D5
Yesterday I ran into an issue where the build process of an application depended on a proper configured application. There is a distributed configuration file. But for the build process to run successfully, the distributed file has to be copied (and if necessary adjusted) manually.
I see some issues with that.
 Build has a dependency on configuration. The build process for an application should stay the same.</description>
    </item>
    
    <item>
      <title>Day 4: Autoloading Optimization in Composer</title>
      <link>https://arueckauer.github.io/posts/2019/05/day-4-autoloading-optimization-in-composer/</link>
      <pubDate>Thu, 23 May 2019 23:00:00 +0200</pubDate>
      
      <guid>https://arueckauer.github.io/posts/2019/05/day-4-autoloading-optimization-in-composer/</guid>
      <description>This article is part of my #100DaysOfCode and #100DaysOfBlogging challenge. R1D4
Today I&amp;rsquo;m studying the Autoloader Optimization article of the Composer documentation.
Purpose The optimization is designed to reduce the performance impact of the autoloader. It is not intended for use in development as it will have undesired side-effects.
Optimization levels There are two levels of optimization and the second level comes with two options. These two options cannot be combined.</description>
    </item>
    
    <item>
      <title>Day 3: Keep a Changelog</title>
      <link>https://arueckauer.github.io/posts/2019/05/day-3-keep-a-changelog/</link>
      <pubDate>Wed, 22 May 2019 20:39:27 +0200</pubDate>
      
      <guid>https://arueckauer.github.io/posts/2019/05/day-3-keep-a-changelog/</guid>
      <description>This article is part of my #100DaysOfCode and #100DaysOfBlogging challenge. R1D3
Today I was working with keep a changelog, especially with Matthew Weier O&amp;rsquo;Phinney&amp;rsquo;s implementation of it. I am fascinated by the idea of managing the CHANGELOG from the command line.
Installation Setup is thanks to composer straight-forward. You can either install it locally or globally. I went with the latter.
composer global require phly/keep-a-changelog  If you haven&amp;rsquo;t already, remember to add the global composer bin path to your PATH environment variable.</description>
    </item>
    
    <item>
      <title>Day 2: Clean Expressive Skeleton</title>
      <link>https://arueckauer.github.io/posts/2019/05/day-2-clean-expressive-skeleton/</link>
      <pubDate>Tue, 21 May 2019 20:45:00 +0200</pubDate>
      
      <guid>https://arueckauer.github.io/posts/2019/05/day-2-clean-expressive-skeleton/</guid>
      <description>This article is part of my #100DaysOfCode and #100DaysOfBlogging challenge. R1D2
Whenever starting a new Zend Expressive project, I use the handy zendframework/zend-expressive-skeleton. It creates an almost empty Expressive application structure with your choice of
 code structure, DI container, router, template engine and error handler.  It comes also with two exemplary handlers and conditions for various routers and template engines. I wondered, what a cleaned-up skeleton would look like and how many bits and pieces were actually there which could be removed.</description>
    </item>
    
    <item>
      <title>From Flat to Modular</title>
      <link>https://arueckauer.github.io/posts/2019/05/from-flat-to-modular/</link>
      <pubDate>Fri, 17 May 2019 06:30:00 +0200</pubDate>
      
      <guid>https://arueckauer.github.io/posts/2019/05/from-flat-to-modular/</guid>
      <description>Transforming of a flat application structure to a modular one in a Zend Expressive project
In an Expressive project I ran into the issue, where the application grew much larger than initially expected. How about that? The project got initialized with a flat code structure, which is the default selection of the Expressive Skeleton. Flat basically means the application is organized in a single module in contrast to endless modules in the modular structure.</description>
    </item>
    
  </channel>
</rss>