<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>100-days-of-code on Andi R√ºckauer</title>
    <link>https://arueckauer.github.io/tags/100-days-of-code/</link>
    <description>Recent content in 100-days-of-code on Andi R√ºckauer</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Sat, 01 Jun 2019 21:27:11 +0200</lastBuildDate>
    
	<atom:link href="https://arueckauer.github.io/tags/100-days-of-code/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Php Version Manager: First Idea</title>
      <link>https://arueckauer.github.io/posts/2019/06/php-version-manager-first-idea/</link>
      <pubDate>Sat, 01 Jun 2019 21:27:11 +0200</pubDate>
      
      <guid>https://arueckauer.github.io/posts/2019/06/php-version-manager-first-idea/</guid>
      <description>With a working CLI PHP version switcher, it would be very neat to also have a CLI PHP version manager, which allows the automated installation of available PHP versions. As an inspiration I am looking with one eye toward the nvm. I am aware of the phpvm package. This package provided by Anthony Ferrara is far from stable and currently supports only Ubuntu. My focus will be the Windows platform.</description>
    </item>
    
    <item>
      <title>Php Version Switcher: The Function</title>
      <link>https://arueckauer.github.io/posts/2019/05/php-version-switcher-the-function/</link>
      <pubDate>Fri, 31 May 2019 22:56:25 +0200</pubDate>
      
      <guid>https://arueckauer.github.io/posts/2019/05/php-version-switcher-the-function/</guid>
      <description>This article is part of my #100DaysOfCode and #100DaysOfBlogging challenge. R1D11
This is part four of a series of articles about the PHP Version Switcher.
 Part One: Php Version Switcher: PowerShell Module Part Two: Php Version Switcher: PowerShell Naming Convention Part Three: Php Version Switcher: The Structure  Today I finally breathe life into the module function. üï∫üèº
Administrator privileges Since the Apache services will be restarted, the module requires administrator privileges.</description>
    </item>
    
    <item>
      <title>Php Version Switcher: The Structure</title>
      <link>https://arueckauer.github.io/posts/2019/05/php-version-switcher-the-structure/</link>
      <pubDate>Thu, 30 May 2019 22:47:03 +0200</pubDate>
      
      <guid>https://arueckauer.github.io/posts/2019/05/php-version-switcher-the-structure/</guid>
      <description>This article is part of my #100DaysOfCode and #100DaysOfBlogging challenge. R1D10
This is part three of a series of articles about the PHP Version Switcher.
 Part One: Php Version Switcher: PowerShell Module Part Two: Php Version Switcher: PowerShell Naming Convention Part Four: Php Version Switcher: The Function  Today I will talk about the structural concept of the PHP Version Switcher.
On Windows you need to add the path of your PHP location to the system environment variable PATH.</description>
    </item>
    
    <item>
      <title>Php Version Switcher: PowerShell Naming Convention</title>
      <link>https://arueckauer.github.io/posts/2019/05/php-version-switcher-powershell-naming-convention/</link>
      <pubDate>Wed, 29 May 2019 20:03:47 +0200</pubDate>
      
      <guid>https://arueckauer.github.io/posts/2019/05/php-version-switcher-powershell-naming-convention/</guid>
      <description>This article is part of my #100DaysOfCode and #100DaysOfBlogging challenge. R1D9
This is part two of a series of articles about the PHP Version Switcher.
 Part One: Php Version Switcher: PowerShell Module Part Three: Php Version Switcher: The Structure Part Four: Php Version Switcher: The Function  Yesterday I started off, moving for my PHP version switcher to a new home by creating a PowerShell module.
Whilst the import of the module and invocation of the function worked, the Import-Module throw a warning:</description>
    </item>
    
    <item>
      <title>Php Version Switcher: PowerShell Module</title>
      <link>https://arueckauer.github.io/posts/2019/05/php-version-switcher-powershell-module/</link>
      <pubDate>Tue, 28 May 2019 20:36:42 +0200</pubDate>
      
      <guid>https://arueckauer.github.io/posts/2019/05/php-version-switcher-powershell-module/</guid>
      <description>This article is part of my #100DaysOfCode and #100DaysOfBlogging challenge. R1D8
This is part one of a series of articles about the PHP Version Switcher.
 Part Two: Php Version Switcher: PowerShell Naming Convention Part Three: Php Version Switcher: The Structure Part Four: Php Version Switcher: The Function  Most of our costumers provide Windows Servers for the PHP applications we implement and maintain for them. Although it has become much easier to get a PHP running under Windows than ten years ago, it&amp;rsquo;s still not the choice environment for a typical PHP web application.</description>
    </item>
    
    <item>
      <title>Difference of Squares</title>
      <link>https://arueckauer.github.io/posts/2019/05/difference-of-squares/</link>
      <pubDate>Mon, 27 May 2019 20:28:26 +0200</pubDate>
      
      <guid>https://arueckauer.github.io/posts/2019/05/difference-of-squares/</guid>
      <description>This article is part of my #100DaysOfCode and #100DaysOfBlogging challenge. R1D7
Today I am solving the Difference of Squares of the PHP track on Exercism.
Exercism offers its users learning new programming languages through exercises with the valuable feedback of mentors. It currently has 50 different language tracks like C#, Go, Kotlin, TypeScript and many others. Head over to Exercism to join.
Introduction The source of this exercise is Problem 6 of the Euler project.</description>
    </item>
    
    <item>
      <title>Use dotenv to configure a Zend Expressive application</title>
      <link>https://arueckauer.github.io/posts/2019/05/use-dotenv-to-configure-a-zend-expressive-application/</link>
      <pubDate>Sat, 25 May 2019 20:43:15 +0200</pubDate>
      
      <guid>https://arueckauer.github.io/posts/2019/05/use-dotenv-to-configure-a-zend-expressive-application/</guid>
      <description>This article is part of my #100DaysOfCode and #100DaysOfBlogging challenge. R1D6
 [The Twelve-Factor App] requires strict separation of config from code.
 Taken from factor three of The Twelve-Factor App.
Today I am studying about how to achieve this requirement making usage of phpdotenv in a Zend Expressive context.
I will not go into details on and advantages of this concept. A leave that up to other resources.</description>
    </item>
    
    <item>
      <title>Day 5: A change for the better</title>
      <link>https://arueckauer.github.io/posts/2019/05/day-5-a-change-for-the-better/</link>
      <pubDate>Fri, 24 May 2019 23:37:51 +0200</pubDate>
      
      <guid>https://arueckauer.github.io/posts/2019/05/day-5-a-change-for-the-better/</guid>
      <description>This article is part of my #100DaysOfCode and #100DaysOfBlogging challenge. R1D5
Yesterday I ran into an issue where the build process of an application depended on a proper configured application. There is a distributed configuration file. But for the build process to run successfully, the distributed file has to be copied (and if necessary adjusted) manually.
I see some issues with that.
 Build has a dependency on configuration. The build process for an application should stay the same.</description>
    </item>
    
    <item>
      <title>Day 4: Autoloading Optimization in Composer</title>
      <link>https://arueckauer.github.io/posts/2019/05/day-4-autoloading-optimization-in-composer/</link>
      <pubDate>Thu, 23 May 2019 23:00:00 +0200</pubDate>
      
      <guid>https://arueckauer.github.io/posts/2019/05/day-4-autoloading-optimization-in-composer/</guid>
      <description>This article is part of my #100DaysOfCode and #100DaysOfBlogging challenge. R1D4
Today I&amp;rsquo;m studying the Autoloader Optimization article of the Composer documentation.
Purpose The optimization is designed to reduce the performance impact of the autoloader. It is not intended for use in development as it will have undesired side-effects.
Optimization levels There are two levels of optimization and the second level comes with two options. These two options cannot be combined.</description>
    </item>
    
    <item>
      <title>Day 3: Keep a Changelog</title>
      <link>https://arueckauer.github.io/posts/2019/05/day-3-keep-a-changelog/</link>
      <pubDate>Wed, 22 May 2019 20:39:27 +0200</pubDate>
      
      <guid>https://arueckauer.github.io/posts/2019/05/day-3-keep-a-changelog/</guid>
      <description>This article is part of my #100DaysOfCode and #100DaysOfBlogging challenge. R1D3
Today I was working with keep a changelog, especially with Matthew Weier O&amp;rsquo;Phinney&amp;rsquo;s implementation of it. I am fascinated by the idea of managing the CHANGELOG from the command line.
Installation Setup is thanks to composer straight-forward. You can either install it locally or globally. I went with the latter.
composer global require phly/keep-a-changelog  If you haven&amp;rsquo;t already, remember to add the global composer bin path to your PATH environment variable.</description>
    </item>
    
    <item>
      <title>Day 2: Clean Expressive Skeleton</title>
      <link>https://arueckauer.github.io/posts/2019/05/day-2-clean-expressive-skeleton/</link>
      <pubDate>Tue, 21 May 2019 20:45:00 +0200</pubDate>
      
      <guid>https://arueckauer.github.io/posts/2019/05/day-2-clean-expressive-skeleton/</guid>
      <description>This article is part of my #100DaysOfCode and #100DaysOfBlogging challenge. R1D2
Whenever starting a new Zend Expressive project, I use the handy zendframework/zend-expressive-skeleton. It creates an almost empty Expressive application structure with your choice of
 code structure, DI container, router, template engine and error handler.  It comes also with two exemplary handlers and conditions for various routers and template engines. I wondered, what a cleaned-up skeleton would look like and how many bits and pieces were actually there which could be removed.</description>
    </item>
    
    <item>
      <title>Day 1: Getting started with Terraform</title>
      <link>https://arueckauer.github.io/posts/2019/05/day-1-getting-started-with-terraform/</link>
      <pubDate>Mon, 20 May 2019 22:00:00 +0200</pubDate>
      
      <guid>https://arueckauer.github.io/posts/2019/05/day-1-getting-started-with-terraform/</guid>
      <description>This article is part of my #100DaysOfCode and #100DaysOfBlogging challenge. R1D1
This year I attended the Global Azure Bootcamp in Z√ºrich. It was a very well organized conference with lots of interesting sessions. I definitely will go again next year!
One of my favorites was Terraform and Azure - How to GitOps by Sandro Koechli and J√∂rn Stenkamp. They introduced the idea of managing infrastructure as code with Git. This concept was new to me and very exciting.</description>
    </item>
    
    <item>
      <title>100 Days of Code</title>
      <link>https://arueckauer.github.io/posts/2019/05/100-days-of-code/</link>
      <pubDate>Mon, 20 May 2019 06:00:00 +0200</pubDate>
      
      <guid>https://arueckauer.github.io/posts/2019/05/100-days-of-code/</guid>
      <description>Lately quite a few posts on the #100DaysOfCode challenge have come up on my Twitter timeline. I was curious what it is all about. So, I started to do some research and I really liked what I was reading.
In this post I am writing about my own commitment to the challenge. If you want to know more about it yourself, start reading the initial article on medium or go straight to the official website.</description>
    </item>
    
  </channel>
</rss>