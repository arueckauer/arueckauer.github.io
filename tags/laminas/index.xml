<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>laminas on Andi Rückauer</title>
    <link>https://arueckauer.github.io/tags/laminas/</link>
    <description>Recent content in laminas on Andi Rückauer</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Wed, 11 Dec 2019 14:16:25 +0100</lastBuildDate>
    
	<atom:link href="https://arueckauer.github.io/tags/laminas/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Stream Zip in Zend Expressive</title>
      <link>https://arueckauer.github.io/posts/2019/12/stream-zip-in-zend-expressive/</link>
      <pubDate>Wed, 11 Dec 2019 14:16:25 +0100</pubDate>
      
      <guid>https://arueckauer.github.io/posts/2019/12/stream-zip-in-zend-expressive/</guid>
      <description>A feature request in a customer project was to zip multiple files</description>
    </item>
    
    <item>
      <title>Day 2: Clean Expressive Skeleton</title>
      <link>https://arueckauer.github.io/posts/2019/05/day-2-clean-expressive-skeleton/</link>
      <pubDate>Tue, 21 May 2019 20:45:00 +0200</pubDate>
      
      <guid>https://arueckauer.github.io/posts/2019/05/day-2-clean-expressive-skeleton/</guid>
      <description>This article is part of my #100DaysOfCode and #100DaysOfBlogging challenge. R1D2
 Whenever starting a new Zend Expressive project, I use the handy zendframework/zend-expressive-skeleton. It creates an almost empty Expressive application structure with your choice of
 code structure, DI container, router, template engine and error handler.  It comes also with two exemplary handlers and conditions for various routers and template engines. I wondered, what a cleaned-up skeleton would look like and how many bits and pieces were actually there which could be removed.</description>
    </item>
    
    <item>
      <title>From Flat to Modular</title>
      <link>https://arueckauer.github.io/posts/2019/05/from-flat-to-modular/</link>
      <pubDate>Fri, 17 May 2019 06:30:00 +0200</pubDate>
      
      <guid>https://arueckauer.github.io/posts/2019/05/from-flat-to-modular/</guid>
      <description>Transforming of a flat application structure to a modular one in a Zend Expressive project
In an Expressive project I ran into the issue, where the application grew much larger than initially expected. How about that? The project got initialized with a flat code structure, which is the default selection of the Expressive Skeleton. Flat basically means the application is organized in a single module in contrast to endless modules in the modular structure.</description>
    </item>
    
  </channel>
</rss>