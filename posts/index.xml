<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on Andi R√ºckauer</title>
        <link>https://arueckauer.github.io/posts/</link>
        <description>Recent content in Posts on Andi R√ºckauer</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
        <lastBuildDate>Sat, 25 May 2019 20:43:15 +0200</lastBuildDate>
        <atom:link href="https://arueckauer.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>Use dotenv to configure a Zend Expressive application</title>
            <link>https://arueckauer.github.io/posts/2019/05/use-dotenv-to-configure-a-zend-expressive-application/</link>
            <pubDate>Sat, 25 May 2019 20:43:15 +0200</pubDate>
            
            <guid>https://arueckauer.github.io/posts/2019/05/use-dotenv-to-configure-a-zend-expressive-application/</guid>
            <description>This article is part of my #100DaysOfCode and #100DaysOfBlogging challenge. R1D6
 [The Twelve-Factor App] requires strict separation of config from code.
 Taken from factor three of The Twelve-Factor App.
Today I am studying about how to achieve this requirement making usage of phpdotenv in a Zend Expressive context.
I will not go into details on and advantages of this concept. A leave that up to other resources.</description>
            <content type="html"><![CDATA[

<p><em>This article is part of my <a href="/tags/100-days-of-code/">#100DaysOfCode</a> and #100DaysOfBlogging challenge. R1D6</em></p>

<blockquote>
<p>[The Twelve-Factor App] requires strict separation of config from code.</p>
</blockquote>

<p><em>Taken from <a href="https://12factor.net/config" target="_blank">factor three</a> of The Twelve-Factor App.</em></p>

<p>Today I am studying about how to achieve this requirement making usage of <a href="https://github.com/vlucas/phpdotenv" target="_blank">phpdotenv</a> in a Zend Expressive context.</p>

<p>I will not go into details on and advantages of this concept. A leave that up to other resources.</p>

<h2 id="phpdotenv">phpdotenv</h2>

<p>This package</p>

<blockquote>
<p>Loads environment variables from <code>.env</code> to <code>getenv()</code>, <code>$_ENV</code> and <code>$_SERVER</code> automagically.</p>
</blockquote>

<p>It has a clean setup and interface. To load an <code>.env</code> file use</p>

<pre><code class="language-php">$dotenv = Dotenv\Dotenv::create(__DIR__);
$dotenv-&gt;load();
</code></pre>

<p>Then you can access it via</p>

<pre><code class="language-php">$s3Bucket = getenv('S3_BUCKET');
$s3Bucket = $_ENV['S3_BUCKET'];
$s3Bucket = $_SERVER['S3_BUCKET'];
</code></pre>

<p>The documentation mentions also the possibility to access variable through the request class. This is out-of-scope of this blog entry, since I want to access env vars only in configuration files.</p>

<h2 id="install-phpdotenv">Install phpdotenv</h2>

<p>I install the package via <a href="https://getcomposer.org" target="_blank">Composer</a>.</p>

<pre><code class="language-powershell">composer require vlucas/phpdotenv
</code></pre>

<h2 id="create-a-dotenv-file">Create a dotenv file</h2>

<p>Next, I create a <code>.env</code> file.</p>

<pre><code>DOCTRINE_CONNECTION_HOST=&quot;localhost&quot;
DOCTRINE_CONNECTION_PORT=&quot;3306&quot;
DOCTRINE_CONNECTION_USER=&quot;db_user&quot;
DOCTRINE_CONNECTION_PASSWORD=&quot;my-53cr37&quot;
DOCTRINE_CONNECTION_DBNAME=&quot;database&quot;
DOCTRINE_CONNECTION_charset=&quot;utf8mb4&quot;
</code></pre>

<h2 id="load-dotenv">Load dotenv</h2>

<p>Now <code>phpdotenv</code> needs to be put to work and do its magic. In my <code>index.php</code> I add the following two lines right after requiring the composer autoload file.</p>

<pre><code class="language-php">$dotenv = Dotenv\Dotenv::create(__DIR__);
$dotenv-&gt;load();
</code></pre>

<h2 id="load-configuration-from-dotenv">Load configuration from dotenv</h2>

<p>My configuration file with the database is updated, to use the env vars now available through <code>getenv()</code>.</p>

<pre><code class="language-php">&lt;?php

declare(strict_types = 1);

return [
    'doctrine' =&gt; [
        'connection' =&gt; [
            'orm_default' =&gt; [
                'params' =&gt; [
                    'host'     =&gt; getenv('DOCTRINE_CONNECTION_HOST'),
                    'port'     =&gt; getenv('DOCTRINE_CONNECTION_PORT'),
                    'user'     =&gt; getenv('DOCTRINE_CONNECTION_USER'),
                    'password' =&gt; getenv('DOCTRINE_CONNECTION_PASSWORD'),
                    'dbname'   =&gt; getenv('DOCTRINE_CONNECTION_DBNAME'),
                    'charset'  =&gt; getenv('DOCTRINE_CONNECTION_CHARSET'),
                ],
            ],
        ],
    ],
];

</code></pre>

<h2 id="goal-accomplished">Goal accomplished</h2>

<p>A quick check on my API confirms that the env vars are utilized correctly. üëç</p>
]]></content>
        </item>
        
        <item>
            <title>Day 5: A change for the better</title>
            <link>https://arueckauer.github.io/posts/2019/05/day-5-a-change-for-the-better/</link>
            <pubDate>Fri, 24 May 2019 23:37:51 +0200</pubDate>
            
            <guid>https://arueckauer.github.io/posts/2019/05/day-5-a-change-for-the-better/</guid>
            <description>Yesterday I ran into an issue where the build process of an application depended on a proper configured application. There is a distributed configuration file. But for the build process to run successfully, the distributed file has to be copied (and if necessary adjusted) manually.
I see some issues with that.
 Build has a dependency on configuration. The build process for an application should stay the same. It must not produce a different outcome depending on the local setup.</description>
            <content type="html"><![CDATA[

<p>Yesterday I ran into an issue where the build process of an application depended on a proper configured application. There is a distributed configuration file. But for the build process to run successfully, the distributed file has to be copied (and if necessary adjusted) manually.</p>

<p>I see some issues with that.</p>

<ol>
<li><strong>Build has a dependency on configuration.</strong> The build process for an application should stay the same. It must not produce a different outcome depending on the local setup.</li>
<li><strong>Build process will not run on CI/CD.</strong> In this setup the application will never be run in CI/CD.</li>
<li><strong>Repetitive tasks</strong>. Why should every developer manage configuration, if it can be automated? Automation will lower risk of human error and speed up the process. On the topic of automating things, I can recommend following <a href="https://github.com/rdbartram" target="_blank">Ryan Bartram</a>, the author of <a href="https://www.dftai.ch/" target="_blank">Don&rsquo;t forget to automate it</a>. I got the chance to get to know him on the <a href="https://www.zurich.azurebootcamp.net/" target="_blank">Global Azure Bootcamp</a>, great and funny guy!</li>
</ol>

<h2 id="proper-way">Proper way</h2>

<p>The proper way to fix this, is to address the author of the <del>abomination</del> feature and improve the build process. This is what I will do.</p>

<h2 id="a-connected-issue">A connected issue</h2>

<p>While solving the issue of getting the build to work, I was thinking about the application setup. Most of our projects require local configuration before they are able to run. If you&rsquo;re not familiar with an application, it can be a tedious task to find out all requirements and dependencies. Oftentimes we end up sharing our local configuration files. ¬Ø\_(„ÉÑ)\_/¬Ø</p>

<p>But what if you could checkout a project which would run out-of-the-box? For development you typically would use virtualization with a configured machine/container laying in the repository, boot up the machine and voil√†.</p>

<h2 id="small-steps">Small steps</h2>

<p>Before configuring virtualizations, I wanted to make a smaller step which I and others could use instantly. The idea was to automate the process of copying required configuration files. Some manual steps like database credentials would still be required, but at least the configuration files/templates exist.</p>

<h2 id="configuration-types">Configuration types</h2>

<p>There are different types of configurations.</p>

<ol>
<li><strong>Global</strong> - The application is dependent on it. This could be a default locale, template paths and so on. These settings are committed to the VCS.</li>
<li><strong>Local</strong> - Database credentials etc. The application depends on them. However, they are not committed to VCS, because they differ from environment to environment and/or they could be sensitive data.</li>
<li><strong>Development</strong> - Settings that are only required in a development environment. That is displaying debugging information, a turned off cache etc.</li>
</ol>

<p>The first type is already in the VCS and does not require local adjustments. The local configuration is what really is interesting. The application depends on it, but the configuration may only exist as a distributed configuration file. The development configuration could potentially be automated as well, but this will not be in today&rsquo;s scope.</p>

<h2 id="composer-scripts-ftw">Composer scripts FTW</h2>

<p>Very quickly I found a solution by putting <a href="https://getcomposer.org/doc/articles/scripts.md" target="_blank">Composer scripts</a> to work. At first I put a PHP command directly in the <code>scripts</code> section of the <code>composer.json</code>. However, that just didn&rsquo;t feel right. It was very hard to read and maintain. So, I defined a callback.</p>

<pre><code class="language-json">{
  // [..]
  &quot;scripts&quot;: {
    &quot;post-install-cmd&quot;: [&quot;App\\ComposerScripts::postInstall&quot;]
    // [..]
  }
}
</code></pre>

<p>Next, I implemented the referenced <code>ComposerScripts</code> to copy the distributed configuration files, if no local copy exists.</p>

<pre><code class="language-php">&lt;?php

declare(strict_types = 1);

namespace App;

class ComposerScripts
{
    private static $configurationFiles = [
        'config/autoload/services.local.php.dist' =&gt; 'config/autoload/services.local.php',
        'config/autoload/doctrine.local.php.dist' =&gt; 'config/autoload/doctrine.local.php',
    ];

    public static function postInstall() : void
    {
        foreach (static::$configurationFiles as $distributed =&gt; $destination) {
            if (! file_exists($destination)) {
                copy($distributed, $destination);
            }
        }
    }
}
</code></pre>

<p>Beautiful. It works like a charm.</p>

<p>This for sure is a poor man&rsquo;s solution, quick and dirty. In the sense of Kaizen, it is a change for the better and will continue to improve.</p>
]]></content>
        </item>
        
        <item>
            <title>Day 4: Autoloading Optimization in Composer</title>
            <link>https://arueckauer.github.io/posts/2019/05/day-4-autoloading-optimization-in-composer/</link>
            <pubDate>Thu, 23 May 2019 23:00:00 +0200</pubDate>
            
            <guid>https://arueckauer.github.io/posts/2019/05/day-4-autoloading-optimization-in-composer/</guid>
            <description>Today I&amp;rsquo;m studying the Autoloader Optimization article of the Composer documentation.
Purpose The optimization is designed to reduce the performance impact of the autoloader. It is not intended for use in development as it will have undesired side-effects.
Optimization levels There are two levels of optimization and the second level comes with two options. These two options cannot be combined.
 Optimization Level 1: Class map generation Optimization Level 2/A: Authoritative class maps Optimization Level 2/B: APCu cache  I will not get into detail, which level and options is doing what.</description>
            <content type="html"><![CDATA[

<p>Today I&rsquo;m studying the <a href="https://getcomposer.org/doc/articles/autoloader-optimization.md" target="_blank">Autoloader Optimization</a> article of the Composer documentation.</p>

<h2 id="purpose">Purpose</h2>

<p>The optimization is designed to reduce the performance impact of the autoloader. It is not intended for use in development as it will have undesired side-effects.</p>

<h2 id="optimization-levels">Optimization levels</h2>

<p>There are two levels of optimization and the second level comes with two options. These two options cannot be combined.</p>

<ul>
<li>Optimization Level 1: Class map generation</li>
<li>Optimization Level 2/A: Authoritative class maps</li>
<li>Optimization Level 2/B: APCu cache</li>
</ul>

<p>I will not get into detail, which level and options is doing what. The article is very brief and clear already.</p>

<h2 id="meat-on-the-bone">Meat on the bone</h2>

<p>Now, what does this actually look like in practice? To compare the differences, I will test it on an actual application. I will compare</p>

<ul>
<li>Level 0: No optimization - <code>composer install</code>,</li>
<li>Level 1: Class map generation - <code>composer dump-autoload -a</code> and</li>
<li>Level 2/A: Authoritative class maps - <code>composer dump-autoload -o</code>.</li>
</ul>

<h3 id="create-new-project">Create new project</h3>

<p>To compare the different optimization levels any application utilizing the PSR-4 standard will do. I choose an empty <a href="https://symfony.com/" target="_blank">Symfony</a> application.</p>

<pre><code class="language-powershell">composer create-project symfony/website-skeleton my-project
</code></pre>

<h3 id="create-autoloading-with-optimization-levels-0-1-and-2-a">Create autoloading with optimization levels 0, 1 and 2/A</h3>

<p>The <code>create-project</code> command will already execute an <code>install</code>. The application has now no autoloading optimization and is ready for development. I copy the <code>.\vendor\composer</code> folder to a different location. I then execute <code>composer dump-autoload -o</code> and <code>composer dump-autoload -a</code> and copy the <code>.\vendor\composer</code> after each command execution.</p>

<h3 id="what-s-the-difference">What&rsquo;s the difference?</h3>

<p>I then compare the three copies:</p>

<h4 id="level-0">Level 0</h4>

<p>If no optimization is done, the autoloading is missing the class map which is generated for the other two options in <code>autoload_classmap.php</code> and <code>autoload_static.php</code>.</p>

<h4 id="level-1">Level 1</h4>

<p>Level 1 registers PSR-0 and PSR-4 directories to the <code>Composer\Autoload\ClassLoader</code>. If a given class cannot be found, it falls back to look in the filesystem according to the registered rules.</p>

<p><code>.\vendor\composer\autoload_real.php</code></p>

<pre><code class="language-php">// [..]
            $map = require __DIR__ . '/autoload_namespaces.php';
            foreach ($map as $namespace =&gt; $path) {
                $loader-&gt;set($namespace, $path);
            }

            $map = require __DIR__ . '/autoload_psr4.php';
            foreach ($map as $namespace =&gt; $path) {
                $loader-&gt;setPsr4($namespace, $path);
            }
// [..]
</code></pre>

<h4 id="level-2-a">Level 2/A</h4>

<p>Whereas Level 2/A does not register PSR-0 and PSR-4 directories and instead sets <code>$classMapAuthoritative</code>in <code>Composer\Autoload\ClassLoader</code> to <code>true</code>.</p>

<blockquote>
<p>Turns off searching the prefix and fallback directories for classes that have not been registered with the class map.</p>
</blockquote>

<p><code>.\vendor\composer\autoload_real.php</code></p>

<pre><code class="language-php">// [..]
        $loader-&gt;setClassMapAuthoritative(true);
// [..]
</code></pre>

<h2 id="conclusion">Conclusion</h2>

<p>This study has helped me gain a better understanding of what is happening behind the scene in composer&rsquo;s autoloading. Although everything is already very well documented in the article, I learn much better, if I take things apart.</p>

<p>So definitely in production.</p>

<pre><code class="language-powershell">composer install --no-ansi --no-dev --no-interaction --no-progress --no-scripts --classmap-authoritative
</code></pre>
]]></content>
        </item>
        
        <item>
            <title>Day 3: Keep a Changelog</title>
            <link>https://arueckauer.github.io/posts/2019/05/day-3-keep-a-changelog/</link>
            <pubDate>Wed, 22 May 2019 20:39:27 +0200</pubDate>
            
            <guid>https://arueckauer.github.io/posts/2019/05/day-3-keep-a-changelog/</guid>
            <description>Today I was working with keep a changelog, especially with Matthew Weier O&amp;rsquo;Phinney&amp;rsquo;s implementation of it. I am fascinated by the idea of managing the CHANGELOG from the command line.
Installation Setup is thanks to composer straight-forward. You can either install it locally or globally. I went with the latter.
composer global require phly/keep-a-changelog  If you haven&amp;rsquo;t already, remember to add the global composer bin path to your PATH environment variable.</description>
            <content type="html"><![CDATA[

<p>Today I was working with <a href="https://keepachangelog.com/" target="_blank">keep a changelog</a>, especially with <a href="https://mwop.net/" target="_blank">Matthew Weier O&rsquo;Phinney</a>&rsquo;s <a href="https://github.com/phly/keep-a-changelog" target="_blank">implementation</a> of it. I am fascinated by the idea of managing the CHANGELOG from the command line.</p>

<h2 id="installation">Installation</h2>

<p>Setup is thanks to composer straight-forward. You can either install it locally or globally. I went with the latter.</p>

<pre><code class="language-powershell">composer global require phly/keep-a-changelog
</code></pre>

<p>If you haven&rsquo;t already, remember to add the global composer bin path to your PATH environment variable.</p>

<h2 id="commands">Commands</h2>

<p>Now let&rsquo;s have a look at it.</p>

<p><img src="/img/day-3-keep-a-changelog/keep-a-changelog-commands.png" alt="keep-a-changelog commands" /></p>

<h2 id="setup">Setup</h2>

<p>Getting started is as simple as</p>

<pre><code class="language-powershell">keep-a-changelog new
</code></pre>

<p>By default <code>keep-a-changelog</code> starts with version <code>0.1.0</code>. The option <code>-i, --initial-version=INITIAL-VERSION</code> allows you to overwrite it. If you want a filename other then <code>CHANGELOG.md</code>, use option <code>-f, --file=FILE</code>.</p>

<h2 id="configuration">Configuration</h2>

<p>In the configuration a (provider api) token, provider and custom domain may be stored. It can be initialized with</p>

<pre><code class="language-powershell">keep-a-changelog config
</code></pre>

<p>You then will be asked to provide the required information. By using the option <code>-g, --global</code>, it is possible to store the configuration globally. This helps reusing the configuration in other projects and prevent accidentally committing it to the VCS.</p>

<h2 id="available-providers">Available Providers</h2>

<p>The package is shipped with two Providers:</p>

<ol>
<li>GitHub (default) and</li>
<li>GitLab.</li>
</ol>

<p>Since my employer is using <a href="https://beanstalkapp.com/" target="_blank">Beanstalk</a>, I got curious, if it was possible to implement a provider it.</p>

<h2 id="curiosity">Curiosity</h2>

<p>I cloned the repository and digged into the code. Quickly I came across a piece of code which could be a party-pooper. The <code>EntryCommand::preparePatchLink()</code> method <a href="https://github.com/phly/keep-a-changelog/blob/2610134afb6104bda7b4c198903f382cec4b8d50/src/EntryCommand.php#L146" target="_blank">throws an exception</a> if no valid PR link is generated by the provider. Now <a href="https://blog.beanstalkapp.com/post/101864285674/introducing-code-review" target="_blank">Beanstalk don&rsquo;t do no PRs</a>. A <a href="https://twitter.com/arueckauer/status/1131251308114186240" target="_blank">quick check</a> with mwop restored hope, saying <code>--pr</code> is never a required option.</p>

<h2 id="to-infinity-and-beyond">To infinity and beyond</h2>

<p>Awesome. I rolled up my sleeves and started implementing a Beanstalk provider. Thanks to the neat code the internal features were done in couple of minutes. Now only adding a Beanstalk API client and that would be it. At least that is what I thought.</p>

<h2 id="disillusionment">Disillusionment</h2>

<p>Looking for candidates on <a href="https://github.com/search?l=PHP&amp;q=beanstalk+api&amp;type=Repositories" target="_blank">GitHub</a> and <a href="https://packagist.org/?query=beanstalk%20api" target="_blank">Packagist</a> did not look good at all. There might be a package or two that might work, but neither received any updates in years and the code has great improvement potential.</p>

<p>Implementing a PHP client library for the <a href="http://api.beanstalkapp.com/" target="_blank">Beanstalk API</a> goes beyond the scope of today&rsquo;s challenge.</p>

<h2 id="conclusion">Conclusion</h2>

<p>Although there is currently no working provider for Beanstalk, I still want to see the keep-a-changelog in action in a project. On another day I will evaluate the tool in a GitHub or GitLab project and see how it fits into our workflow. So long.</p>
]]></content>
        </item>
        
        <item>
            <title>Day 2: Clean Expressive Skeleton</title>
            <link>https://arueckauer.github.io/posts/2019/05/day-2-clean-expressive-skeleton/</link>
            <pubDate>Tue, 21 May 2019 20:45:00 +0200</pubDate>
            
            <guid>https://arueckauer.github.io/posts/2019/05/day-2-clean-expressive-skeleton/</guid>
            <description>Whenever starting a new Zend Expressive project, I use the handy zendframework/zend-expressive-skeleton. It creates an almost empty Expressive application structure with your choice of
 code structure, DI container, router, template engine and error handler.  It comes also with two exemplary handlers and conditions for various routers and template engines. I wondered, what a cleaned-up skeleton would look like and how many bits and pieces were actually there which could be removed.</description>
            <content type="html"><![CDATA[

<p>Whenever starting a new <a href="https://getexpressive.org" target="_blank">Zend Expressive</a> project, I use the handy <code>zendframework/zend-expressive-skeleton</code>. It creates an almost empty Expressive application structure with your choice of</p>

<ul>
<li>code structure,</li>
<li>DI container,</li>
<li>router,</li>
<li>template engine and</li>
<li>error handler.</li>
</ul>

<p>It comes also with two exemplary handlers and conditions for various routers and template engines. I wondered, what a cleaned-up skeleton would look like and how many bits and pieces were actually there which could be removed.</p>

<h2 id="create-a-new-project">Create a new project</h2>

<p>To create a new skeleton application, I used <code>composer create-project</code>.</p>

<pre><code class="language-powershell">composer create-project zendframework/zend-expressive-skeleton clean-skeleton
</code></pre>

<h2 id="composer-json">composer.json</h2>

<p>First stop is the <code>composer.json</code>. I update the following section to my needs.</p>

<ul>
<li><code>name</code></li>
<li><code>description</code></li>
<li><code>homepage</code></li>
<li><code>license</code></li>
</ul>

<p>Then I removed the following sections - you may want to update these to your needs, especially if you plan to publish your project/library on <a href="https://packagist.org" target="_blank">Packagist</a>.</p>

<ul>
<li><code>keywords</code></li>
<li><code>extra</code></li>
<li><code>support</code></li>
</ul>

<p>Then I removed the <code>post-create-project-cmd</code> from the <code>scripts</code> section.</p>

<h3 id="further-changes">Further changes</h3>

<p>If you&rsquo;re using some other code style tool like [PHP-CS-Fixer]<a href="https://cs.symfony.com/)" target="_blank">https://cs.symfony.com/)</a>, you may want to update the <code>require-dev</code> and in the <code>scripts</code> section the <code>cs-check</code> and <code>cs-fix</code> commands accordingly. Since I sticked to the defaults, I left them as they were.</p>

<p>In the end, my <code>composer.json</code> looked like the following.</p>

<pre><code class="language-json">{
  &quot;name&quot;: &quot;arueckauer/clean-skeleton&quot;,
  &quot;description&quot;: &quot;A zend expressive skeleton purged of all unnecessary items&quot;,
  &quot;type&quot;: &quot;project&quot;,
  &quot;homepage&quot;: &quot;https://github.com/arueckauer/clean-skeleton&quot;,
  &quot;license&quot;: &quot;MIT&quot;,
  &quot;config&quot;: {
    &quot;sort-packages&quot;: true
  },
  &quot;require&quot;: {
    &quot;php&quot;: &quot;^7.1&quot;,
    &quot;zendframework/zend-component-installer&quot;: &quot;^2.1.1&quot;,
    &quot;zendframework/zend-config-aggregator&quot;: &quot;^1.0&quot;,
    &quot;zendframework/zend-diactoros&quot;: &quot;^1.7.1 || ^2.0&quot;,
    &quot;zendframework/zend-expressive&quot;: &quot;^3.0.1&quot;,
    &quot;zendframework/zend-expressive-helpers&quot;: &quot;^5.0&quot;,
    &quot;zendframework/zend-stdlib&quot;: &quot;^3.1&quot;,
    &quot;zendframework/zend-servicemanager&quot;: &quot;^3.3&quot;,
    &quot;zendframework/zend-expressive-fastroute&quot;: &quot;^3.0&quot;
  },
  &quot;require-dev&quot;: {
    &quot;phpunit/phpunit&quot;: &quot;^7.0.1&quot;,
    &quot;roave/security-advisories&quot;: &quot;dev-master&quot;,
    &quot;squizlabs/php_codesniffer&quot;: &quot;^2.9.1&quot;,
    &quot;zendframework/zend-expressive-tooling&quot;: &quot;^1.0&quot;,
    &quot;zfcampus/zf-development-mode&quot;: &quot;^3.1&quot;,
    &quot;filp/whoops&quot;: &quot;^2.1.12&quot;
  },
  &quot;autoload&quot;: {
    &quot;psr-4&quot;: {
      &quot;App\\&quot;: &quot;src/App/src/&quot;
    }
  },
  &quot;autoload-dev&quot;: {
    &quot;psr-4&quot;: {
      &quot;AppTest\\&quot;: &quot;test/AppTest/&quot;
    }
  },
  &quot;scripts&quot;: {
    &quot;development-disable&quot;: &quot;zf-development-mode disable&quot;,
    &quot;development-enable&quot;: &quot;zf-development-mode enable&quot;,
    &quot;development-status&quot;: &quot;zf-development-mode status&quot;,
    &quot;expressive&quot;: &quot;expressive --ansi&quot;,
    &quot;check&quot;: [&quot;@cs-check&quot;, &quot;@test&quot;],
    &quot;clear-config-cache&quot;: &quot;php bin/clear-config-cache.php&quot;,
    &quot;cs-check&quot;: &quot;phpcs&quot;,
    &quot;cs-fix&quot;: &quot;phpcbf&quot;,
    &quot;serve&quot;: &quot;php -S 0.0.0.0:8080 -t public/&quot;,
    &quot;test&quot;: &quot;phpunit --colors=always&quot;,
    &quot;test-coverage&quot;: &quot;phpunit --colors=always --coverage-clover clover.xml&quot;
  }
}
</code></pre>

<p>A <code>composer update</code> confirmed that no updates were required after making the adjustments.</p>

<h2 id="license">License</h2>

<p>I replaced the LICENSE file with the <a href="https://choosealicense.com" target="_blank">license of my choice</a>.</p>

<h2 id="coding-standard">Coding Standard</h2>

<p>If desired, you can update name and rules in <code>phpcs.xml.dist</code>. For the purpose of this test, they remained unchanged in my case.</p>

<h2 id="readme">Readme</h2>

<p>I emptied the readme file, leaving only an h1 with the project name. Usually I fill the readme up with information about the package, setup etc. as the project grows.</p>

<h2 id="shipped-handlers">Shipped Handlers</h2>

<p>Next, I removed the Handler classes with its containing folder, tests and configuration references.</p>

<p>Deleted directories:</p>

<ul>
<li><code>src/App/src/Handler</code></li>
<li><code>test/AppTest/Handler</code></li>
</ul>

<p>Also, I removed the defined routes in <code>config/routes.php</code> and the dependency definitions in <code>src/App/src/ConfigProvider.php</code>.</p>

<h2 id="configuration">Configuration</h2>

<p>In <code>config/config.php</code> I removed Swoole config. If you&rsquo;re using Swoole, you can replace it by an explicit inclusion of the ConfigProvider.</p>

<h2 id="done">Done</h2>

<p>To be honest, my first impression of what can be purged of the skeleton was much more. But there is no clutter whatsoever, just some examples. This challenge has helped me better understand the setup of the skeleton package and showed me just how neat it is organized. I love it.</p>

<h2 id="other-skeleton-resources">Other Skeleton resources</h2>

<p>There are two other skeletons for PHP applications which I want to mention at this point. They both are a closer look worth it, if you&rsquo;re starting new PHP projects on a fairly regular basis or want some reference from time to time.</p>

<ol>
<li><a href="https://github.com/thephpleague/skeleton" target="_blank">thephpleague/skeleton</a> and</li>
<li><a href="https://github.com/php-pds/skeleton" target="_blank">php-pds/skeleton</a></li>
</ol>

<p>The thephpleague/skeleton comes with templates for GitHub issues and pull-requests. And also, a <a href="https://github.com/thephpleague/skeleton/blob/master/prefill.php" target="_blank">prefill</a> command which replaces variables like vendor and package names and urls throughout the cloned repo.</p>
]]></content>
        </item>
        
        <item>
            <title>Day 1: Getting started with Terraform</title>
            <link>https://arueckauer.github.io/posts/2019/05/day-1-getting-started-with-terraform/</link>
            <pubDate>Mon, 20 May 2019 22:00:00 +0200</pubDate>
            
            <guid>https://arueckauer.github.io/posts/2019/05/day-1-getting-started-with-terraform/</guid>
            <description>This year I attended the Global Azure Bootcamp in Z√ºrich. It was a very well organized conference with lots of interesting sessions. I definitely will go again next year!
One of my favorites was Terraform and Azure - How to GitOps by Sandro Koechli and J√∂rn Stenkamp. They introduced the idea of managing infrastructure as code with Git. This concept was new to me and very exciting. Unfortunately time did not allow for some demo.</description>
            <content type="html"><![CDATA[<p>This year I attended the <a href="https://www.zurich.azurebootcamp.net/" target="_blank">Global Azure Bootcamp in Z√ºrich</a>. It was a very well organized conference with lots of interesting sessions. I definitely will go again next year!</p>

<p>One of my favorites was <em><a href="https://speakerdeck.com/azurezurich/gabc2019-terraform-and-azure-how-to-gitops-by-sandro-kochli-and-jorn-stenkamp" target="_blank">Terraform and Azure - How to GitOps</a></em> by <a href="https://www.linkedin.com/in/sandro-koechli/" target="_blank">Sandro Koechli</a> and <a href="https://www.linkedin.com/in/joern-stenkamp-732b58100/" target="_blank">J√∂rn Stenkamp</a>. They introduced the idea of managing infrastructure as code with Git. This concept was new to me and very exciting. Unfortunately time did not allow for some demo.</p>

<p>Today I worked through the <a href="https://learn.hashicorp.com/terraform/getting-started/build" target="_blank">Getting Started</a> chapter for <a href="https://www.terraform.io/" target="_blank">Terraform</a>. I set up an AWS account and wrote my first Terraform configuration. Via the CLI an infrastructure can be initialized, applied, changed and destroyed (among other commands like plan and show).</p>

<p>I gained a basic understanding of how Terraform works. The configuration of <a href="https://www.terraform.io/docs/providers/index.html" target="_blank">Providers</a> and Resources is still very overwhelming.</p>
]]></content>
        </item>
        
        <item>
            <title>100 Days of Code</title>
            <link>https://arueckauer.github.io/posts/2019/05/100-days-of-code/</link>
            <pubDate>Mon, 20 May 2019 06:00:00 +0200</pubDate>
            
            <guid>https://arueckauer.github.io/posts/2019/05/100-days-of-code/</guid>
            <description>Lately quite a few posts on the #100DaysOfCode challenge have come up on my Twitter timeline. I was curious what it is all about. So, I started to do some research and I really liked what I was reading.
In this post I am writing about my own commitment to the challenge. If you want to know more about it yourself, start reading the initial article on medium or go straight to the official website.</description>
            <content type="html"><![CDATA[

<p>Lately quite a few posts on the <a href="https://twitter.com/search?q=%23100DaysOfCode" target="_blank">#100DaysOfCode</a> challenge have come up on my Twitter timeline. I was curious what it is all about. So, I started to do some research and I really liked what I was reading.</p>

<p>In this post I am writing about my own commitment to the challenge. If you want to know more about it yourself, start reading the initial article on <a href="https://medium.freecodecamp.org/join-the-100daysofcode-556ddb4579e4" target="_blank">medium</a> or go straight to the <a href="https://www.100daysofcode.com/" target="_blank">official website</a>.</p>

<h2 id="official-rules">Official rules</h2>

<p>The <a href="https://www.100daysofcode.com/" target="_blank">#100DaysOfCode</a> challenge outlines two main rules:</p>

<blockquote>
<ol>
<li>Code minimum an hour every day for the next 100 days.</li>
<li>Tweet your progress every day with the #100DaysOfCode hashtag.</li>
</ol>
</blockquote>

<p>It also talks about other <a href="https://www.100daysofcode.com/rules/" target="_blank">considerations</a> like reaching out to others who are also doing the challenge or keeping a <a href="https://github.com/Kallaway/100-days-of-code" target="_blank">100 days journal</a>.</p>

<h2 id="my-rules">My rules</h2>

<p>My personal motivation is to keep learning and dive into subjects other than what is required at my current job. I have a broad interest and would like to use this challenge to study, experience and learn. To accomplish these goals, I will adapt the rules a little.</p>

<h3 id="1-code-almost-every-day-for-the-next-100-days">1. Code (almost) every day for the next 100 days</h3>

<p>With <em>almost</em> I am not intending to create a loophole or justify slacking off. Sunday is a day of rest where I do not work and try to spend time with my family and spiritual matters. So, I am committing to 6 days of coding a week.</p>

<p>On a coding day I do not require myself to spend at least one hour on the challenge. Rather I am committing myself to making meaningful use of the time. It should be first a learning experience (even challenging) and second fun as well.</p>

<h3 id="2-blog-about-it">2. Blog about it</h3>

<p>This might be a second challenge I am trying to accomplish at the same time. Instead of just tweet about it, I want to record my learnings in a blog post. The latter is more of a habit-forming challenge than the initial.</p>

<h2 id="topic">Topic</h2>

<p>One of the most productive factors for me is focus. Being able to focus on just one task helps me work very effectively. In more of a natural way I am living a clean desk, zero inbox and other policies or principles.</p>

<p>Just recently I switched from the old beloved <a href="https://www.wunderlist.com/" target="_blank">Wunderlist</a> to a new and shiny <a href="https://todo.microsoft.com/" target="_blank">Microsoft To-Do</a> to keep track of ideas and work that needs to be done. In a list called <em>Play.Fail.Succeed.</em> I keep a collection of topics, technologies, methods and so on which I want to study and learn more about it.</p>

<p>Secondly, I use <a href="https://getpocket.com/" target="_blank">Pocket</a> to keep track of resources of interest, articles I want to read later and so forth.</p>

<p>Both tools provide excellent resources for my #100DaysOfCode challenge.</p>

<p>In this challenge I will focus on DevOps. I am very interested in automating things and decrease the amount of time spent in repetitive tasks. By doing this challenge I hope to advance my knowledge and skills greatly. I want to gain a better understanding of</p>

<ul>
<li>Provisioning,</li>
<li>Orchestration,</li>
<li>Configuration Management,</li>
<li>Deployment and</li>
<li>Automation in general.</li>
</ul>

<h2 id="commitment">Commitment</h2>

<p>Starting today I&rsquo;m publicly committing to the 100DaysOfCode Challenge with the here outlined rules! Learn more and join me!</p>

<p>Gude Laune</p>
]]></content>
        </item>
        
        <item>
            <title>From Flat to Modular</title>
            <link>https://arueckauer.github.io/posts/2019/05/from-flat-to-modular/</link>
            <pubDate>Fri, 17 May 2019 06:30:00 +0200</pubDate>
            
            <guid>https://arueckauer.github.io/posts/2019/05/from-flat-to-modular/</guid>
            <description>Transforming of a flat application structure to a modular one in a Zend Expressive project
In an Expressive project I ran into the issue, where the application grew much larger than initially expected. How about that? The project got initialized with a flat code structure, which is the default selection of the Expressive Skeleton. Flat basically means the application is organized in a single module in contrast to endless modules in the modular structure.</description>
            <content type="html"><![CDATA[

<p><em>Transforming of a flat application structure to a modular one in a Zend Expressive project</em></p>

<p>In an <a href="https://docs.zendframework.com/zend-expressive/" target="_blank">Expressive</a> project I ran into the issue, where the application grew much larger than initially expected. How about that? The project got initialized with a flat code structure, which is the default selection of the <a href="https://github.com/zendframework/zend-expressive-skeleton" target="_blank">Expressive Skeleton</a>. Flat basically means the application is organized in a single module in contrast to endless modules in the modular structure. It also means not only having separate modules but also separate namespaces. This makes handling class names much easier.</p>

<p>Looking back on it now I tend to always choose a modular structure. The only use case for a flat structure would be a micro application with very little backend code. Even then it is questionable as to why not using a modular structure, since the difference between the two are not that big and converting the structure later on is much more effort. But I am getting ahead of myself.</p>

<p>So the single module horded a ton of classes with their factories. This got quite heavy and sometimes confusing. To clear up all the confusion I decided to convert the code structure from flat to modular.</p>

<h2 id="flat-vs-modular-the-comparison">Flat vs. modular: the comparison</h2>

<p>I could not find any documentation or user contributions on how to convert the structure. To find out what the differences are, I decided to create two new projects: one with a flat and one with a modular structure and then compare the two.</p>

<p>I create a new project with flat code structure. All default selections were chosen.</p>

<pre><code class="language-bash">$ composer create-project zendframework/zend-expressive-skeleton expressive-flat
</code></pre>

<p>For modular structure first question <em>What type of installation would you like?</em> was answered with 3 - Modular. For all other options the default selections where chosen.</p>

<pre><code class="language-bash">$ composer create-project zendframework/zend-expressive-skeleton expressive-modular
</code></pre>

<p><img src="/img/from-flat-to-modular/create-project-with-modular-code-structure.png" alt="Create project with modular code structure" /></p>

<p>The structural differences of the two projects are (1) the location of the source file within the <code>App</code> module, (2) a template folder and (3) the autoloading configuration.</p>

<table>
<thead>
<tr>
<th></th>
<th>Flat</th>
<th>Modular</th>
</tr>
</thead>

<tbody>
<tr>
<td>Source App Module</td>
<td><code>src/App</code></td>
<td><code>src/App/src</code></td>
</tr>

<tr>
<td>Template Ordner</td>
<td><em>n/a</em></td>
<td><code>src/App/templates</code></td>
</tr>

<tr>
<td>Autoload configuration</td>
<td><code>&quot;App\\&quot;: &quot;src/App/&quot;</code></td>
<td><code>&quot;App\\&quot;: &quot;src/App/src/&quot;</code></td>
</tr>
</tbody>
</table>

<h2 id="making-the-transition">Making the transition</h2>

<p>Consequently, I needed to make the following changes to convert the project structure:</p>

<ol>
<li>Move contents of <code>src/App</code> to <code>src/App/src</code></li>
<li><em>Optional:</em> Move the templates from within the <code>App</code> folder to <code>src /App/templates</code> and adjust the configured templates path (in my case in <code>config/autoload/application.global.php</code>)</li>
<li>Update the autoload configuration in <code>composer.json</code> to <code>&quot;App\\&quot;: &quot;src/App/src/&quot;</code></li>
<li>Execute <code>composer dump-autoload</code> to update the autoloading classes</li>
</ol>

<p>That&rsquo;s it, the transition is made.</p>

<p>But my initial issue was not solved. I went ahead and re-organized the <code>App</code> module, moving various folders into their own module. For each folder I repeated the following steps.</p>

<ol>
<li>Create a new module <code>$ composer expressive module:create {ModuleName}</code></li>
<li>Moved classes from <code>src/App/src/{ModuleName}/</code> to <code>src/{ModuleName}/src/</code></li>
<li>Updated namespace of classes and imports from <code>App\{ModuleName}</code> to <code>{ModuleName}</code></li>
<li>Moved dependencies definitions from <code>backend/App/src/ConfigProvider.php</code> to <code>backend/{ModuleName}/src/ConfigProvider.php</code></li>
</ol>

<p>Tadaa! Now the setup is much cleaner and simpler. Mission accomplished.</p>

<p>Gude Laune!</p>
]]></content>
        </item>
        
        <item>
            <title>Just do it</title>
            <link>https://arueckauer.github.io/posts/2019/05/just-do-it/</link>
            <pubDate>Thu, 16 May 2019 13:00:00 +0200</pubDate>
            
            <guid>https://arueckauer.github.io/posts/2019/05/just-do-it/</guid>
            <description>The idea of starting my own blog has accompanied me for years. Since I was afraid, it would not see regular updates and quickly become a lonesome tumbleweed, I&amp;rsquo;ve never put it to action.
However I could never set aside having a tool to record and contain my thought. So here goes nothing.
Reasons to start and (not) to end My main motivation of starting this blog is to have a</description>
            <content type="html"><![CDATA[

<p>The idea of starting my own blog has accompanied me for years. Since I was afraid, it would not see regular updates and quickly become a lonesome tumbleweed, I&rsquo;ve never put it to action.</p>

<p>However I could never set aside having a tool to record and contain my thought. So here goes nothing.</p>

<h2 id="reasons-to-start-and-not-to-end">Reasons to start and (not) to end</h2>

<p>My main motivation of starting this blog is to have a</p>

<ul>
<li>journal to record my personal progress in software-development and possibly other topics of interest,</li>
<li>notepad for my learnings to go back to and</li>
<li>container for thoughts in gerneral.</li>
</ul>

<p>These are purely personal reasons and writing for an audience other than myself is not a priority at the moment. Also I am not getting payed for it, so this should be fun!</p>

<blockquote>
<p>Can we just have some fun?</p>
</blockquote>

<p><em>David Picciuto</em> from <a href="https://makesomething.com/" target="_blank">Make Something</a></p>

<p>I definitely do not want to pressure myself to create content on a defined regularity or to set any expectations on quality (which will be difficult).</p>

<h2 id="do-it">Do it</h2>

<p><a href="https://en.wikipedia.org/wiki/Spencer_W._Kimball" target="_blank">Spencer W. Kimball</a>, an American business, civic, and religious leader, is said to have had a sign on his desk saying:</p>

<blockquote>
<p>Do it. Do it right. Do it right now.</p>
</blockquote>

<p>What I believe he meant with it is: The opportunity to get something accomplished will never be better or easier than right now. Putting something off will make it more difficult as time passes.</p>

<p>I&rsquo;m really looking forward to this adventure, Gude Laune!</p>
]]></content>
        </item>
        
    </channel>
</rss>
